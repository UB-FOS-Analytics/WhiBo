/*
 *  WhiBo
 *
 *  Copyright (C) 2010- by WhiBo development team and the contributors
 *
 *  Complete list of developers available at our web site:
 *
 *       http://www.whibo.fon.bg.ac.rs
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see http://www.gnu.org/licenses/.
 */

package rs.fon.whibo.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.io.File;

import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

import rs.fon.whibo.gui.extended.ProblemPreviewPanel;
import rs.fon.whibo.gui.panels.navigator.Navigator;
import rs.fon.whibo.problem.Problem;
import rs.fon.whibo.problem.ProblemBuilder;
import rs.fon.whibo.problem.Subproblem;

/**
 * Defines the main GUI panel
 * 
 * @author Sasa
 * 
 */

public class MainPanel extends javax.swing.JDialog {

	/**
	 * GUI for automatic design of component based machine learning algorithms.
	 * 
	 */
	private static final long serialVersionUID = 1L;

	/** Navogator instance **/
	private static Navigator navigator = new Navigator();

	/** Toolbar instance **/
	private static rs.fon.whibo.gui.panels.toolbar.Toolbar toolbar = new rs.fon.whibo.gui.panels.toolbar.Toolbar();

	/** Editor instance **/
	private static rs.fon.whibo.gui.editor.Editor editor = new rs.fon.whibo.gui.editor.Editor();

	private static ProblemPreviewPanel tree = new ProblemPreviewPanel();

	/** Process instance that is used across the panels **/
	private static rs.fon.whibo.problem.Problem process;

	/**
	 * Creates new form MainPanel. This form is draw according to the provided
	 * process builder.
	 */
	public MainPanel(ProblemBuilder builder, String filePath) {
		process = builder.buildProblem();
		drawPanels();
		fillPanels();
		setFrameCentered();
		//
		// if filePath is entered, load algorithm
		if (filePath != null) {
			File f = new File(filePath);
			if (f.exists()) {
				toolbar.loadFile(filePath);
			} else
				JOptionPane.showMessageDialog(this,
						".wba file does not exist or it is corrupted.");

		}
		// AlgorithmFrame algorithmFrame = new GeneticAlgorithmFrame(builder,
		// filePath);
		// algorithmFrame.setVisible(true);
		editor.setOwner(this);
		// new AlgorithmFrame(builder, filePath);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 461,
				Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 372,
				Short.MAX_VALUE));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void drawPanels() {
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

		setLayout(new BorderLayout());

		add(toolbar, BorderLayout.NORTH);

		add(navigator, BorderLayout.WEST);

		add(editor, BorderLayout.CENTER);

		add(tree, BorderLayout.EAST);

		pack();
	}

	/**
	 * Fills required data upon startup of the panel.
	 */
	private void fillPanels() {
		navigator.load(process.getSubproblems());
		refreshTree();
	}

	public static Problem getProcess() {
		return process;
	}

	public static void setProcess(Problem process) {
		MainPanel.process = process;
		navigator.load(process.getSubproblems());
		editor.restart();
		refreshTree();

	}

	public static void refreshStep(Subproblem step) {
		editor.load(step);
	}

	public static void refreshTree() {
		tree.refreshTreePreview(process);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables

	/**
	 * This method position frame to the center of the screen
	 * 
	 */
	public void setFrameCentered() {
		Toolkit t = Toolkit.getDefaultToolkit();

		Dimension screenSize = t.getScreenSize();
		int width = screenSize.width;
		int height = screenSize.height;

		int x = (int) ((width / 2) - (this.getSize().getWidth() / 2));
		int y = (int) ((height / 2) - (this.getSize().getHeight() / 2));

		this.setLocation(new Point(x, y));
	}
}
